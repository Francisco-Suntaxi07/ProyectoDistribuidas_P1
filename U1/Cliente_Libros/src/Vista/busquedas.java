/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Controlador.controladorApi;
import Controlador.controladorVistas;
import Modelo.libroApi;
import java.awt.Component;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author ASUS GAMING
 */
public class busquedas extends javax.swing.JFrame {

    private controladorApi controladorApi;
    private controladorVistas controlador;
    private DefaultTableModel originalModel; // Guarda la copia original de los datos
    private DefaultTableModel model; // Model actual para la tabla
    private String idTemp;

    public busquedas() throws JSONException {
        initComponents();
        
        this.setLocationRelativeTo(null);
        mostrarTodosLosLibros();
        originalModel = (DefaultTableModel) tblLibros.getModel();

        // Agrega el DocumentListener al campo de búsqueda
        txtBusqueda.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filtrarLibros();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filtrarLibros();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filtrarLibros();
            }
        });
        this.controladorApi = new controladorApi();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtBusqueda = new javax.swing.JTextField();
        lblbuscar = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLibros = new javax.swing.JTable();
        lblRenta = new javax.swing.JLabel();
        btnAtras = new javax.swing.JButton();
        lblrenta = new javax.swing.JLabel();
        txtRenta = new javax.swing.JTextField();
        btnRentar = new javax.swing.JButton();
        lblfechaen = new javax.swing.JLabel();
        txtFechaD = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtBusqueda.setFont(new java.awt.Font("PMingLiU-ExtB", 1, 14)); // NOI18N
        txtBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBusquedaActionPerformed(evt);
            }
        });

        lblbuscar.setFont(new java.awt.Font("PMingLiU-ExtB", 1, 14)); // NOI18N
        lblbuscar.setText("Buscar :");

        tblLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblLibros);

        lblRenta.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        lblRenta.setText("Rentas");

        btnAtras.setText("Atrás");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        lblrenta.setFont(new java.awt.Font("PMingLiU-ExtB", 1, 12)); // NOI18N
        lblrenta.setText("Ingrese el ID del libro que desea rentar :");

        btnRentar.setBackground(new java.awt.Color(51, 102, 255));
        btnRentar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRentar.setForeground(new java.awt.Color(255, 255, 255));
        btnRentar.setText("Rentar");
        btnRentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRentarActionPerformed(evt);
            }
        });

        lblfechaen.setFont(new java.awt.Font("PMingLiU-ExtB", 1, 12)); // NOI18N
        lblfechaen.setText("Ingrese la fecha estimada de devolución (yyyy-MM-dd) :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(lblbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAtras))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(lblRenta, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblrenta))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblfechaen)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 269, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFechaD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRenta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnRentar)
                .addGap(298, 298, 298))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblbuscar)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAtras)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblRenta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblrenta)
                    .addComponent(txtRenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblfechaen)
                    .addComponent(txtFechaD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(btnRentar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBusquedaActionPerformed

    }//GEN-LAST:event_txtBusquedaActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed

        controlador.mostrarVistaLibros();
        dispose();
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Ancho mínimo de la columna
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    private void btnRentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRentarActionPerformed
        String idLibroSeleccionado = txtRenta.getText(); // Obtener el ID del libro desde el campo de texto
        String fechaTexto = txtFechaD.getText();

        // Validar el formato de la fecha
        if (!validarFormatoFecha(fechaTexto)) {
            JOptionPane.showMessageDialog(this, "Error: La fecha ingresada no tiene el formato correcto.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Convierte la cadena a Date
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date fechaDevolucion;

        try {
            fechaDevolucion = dateFormat.parse(fechaTexto);

            // Llamar al método de la API para realizar el préstamo
            try {
                if (controladorApi.existeLibro(idLibroSeleccionado)) {
                    // El libro existe, realiza el préstamo
                    controladorApi.realizarPrestamo(idLibroSeleccionado, idTemp, fechaDevolucion);
                    // Muestra un mensaje de éxito al usuario
                    JOptionPane.showMessageDialog(this, "Préstamo realizado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

                    // Después de realizar el préstamo, regresa a la vista de libros
                    controlador.mostrarVistaLibros();
                    dispose();
                } else {
                    // El libro no existe, muestra un mensaje de error
                    JOptionPane.showMessageDialog(this, "Error: El libro con ID " + idLibroSeleccionado + " no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (RuntimeException e) {
                // Muestra un mensaje de error al usuario
                JOptionPane.showMessageDialog(this, "Error al realizar el préstamo. Detalles: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (JSONException ex) {
                Logger.getLogger(busquedas.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ParseException e) {
            // Manejar la excepción si la conversión de la fecha falla
            JOptionPane.showMessageDialog(this, "Error: La fecha ingresada no es válida.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnRentarActionPerformed
    private boolean validarFormatoFecha(String fecha) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        dateFormat.setLenient(false);  // Hace que la validación sea estricta
        try {
            dateFormat.parse(fecha);
            return true;
        } catch (ParseException e) {
            return false;
        }
    }

    public void mostrarIdUsuario(String idCliente) {
        idTemp = idCliente;
    }

    public void mostrarTodosLosLibros() throws JSONException {
        tblLibros.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); // Desactivar el ajuste automático inicial

        // Configurar el ajuste automático del ancho de las columnas después de que se carguen los datos
        tblLibros.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                resizeColumnWidth(tblLibros);
            }
        });
        // Obtén todos los libros y asigna el modelo original
        libroApi api = new libroApi();
        JSONArray libros = api.obtenerTodosLosLibros();

        model = new DefaultTableModel();
        model.addColumn("ID_Libro");
        model.addColumn("Titulo_Libro");
        model.addColumn("Fecha_Publicacion");
        model.addColumn("Num_Paginas");
        model.addColumn("Estado_Libro");
        model.addColumn("Cantidad_Libro");

        for (int i = 0; i < libros.length(); i++) {
            JSONObject libro = libros.getJSONObject(i);
            model.addRow(new Object[]{
                libro.getString("id_libro"),
                libro.getString("titulo_libro"),
                libro.getString("fecha_publicacion"),
                libro.getInt("num_paginas"),
                libro.getString("estado_libro"),
                libro.getInt("cantidad_libro")
            });
        }

        tblLibros.setModel(model);
    }

    public void filtrarLibros() {
        String filtro = txtBusqueda.getText().toLowerCase();

        // Restaura la tabla a la copia original si el campo de búsqueda está vacío
        if (filtro.isEmpty()) {
            tblLibros.setModel(originalModel);
            return;
        }

        // Crear un nuevo modelo filtrado con las mismas columnas que el modelo original
        DefaultTableModel filteredModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        for (int i = 0; i < originalModel.getColumnCount(); i++) {
            filteredModel.addColumn(originalModel.getColumnName(i));
        }

        for (int i = 0; i < originalModel.getRowCount(); i++) {
            Object[] rowData = new Object[originalModel.getColumnCount()];
            for (int j = 0; j < originalModel.getColumnCount(); j++) {
                rowData[j] = originalModel.getValueAt(i, j);
            }

            // Si el título contiene el texto de búsqueda, agrega la fila al modelo filtrado
            if (rowData[1].toString().toLowerCase().contains(filtro)) {
                filteredModel.addRow(rowData);
            }
        }

        tblLibros.setModel(filteredModel);
    }

    public void setControlador(controladorVistas controlador) {
        this.controlador = controlador;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(busquedas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(busquedas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(busquedas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(busquedas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new busquedas().setVisible(true);
                } catch (JSONException ex) {
                    Logger.getLogger(busquedas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnRentar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblRenta;
    private javax.swing.JLabel lblbuscar;
    private javax.swing.JLabel lblfechaen;
    private javax.swing.JLabel lblrenta;
    private javax.swing.JTable tblLibros;
    private javax.swing.JTextField txtBusqueda;
    private javax.swing.JTextField txtFechaD;
    private javax.swing.JTextField txtRenta;
    // End of variables declaration//GEN-END:variables
}
